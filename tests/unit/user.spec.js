/**
 * Performing unit tests on the User model
 *
 * Random passwords are generated by:
 * @link https://www.avast.com/random-password-generator#pc
 *
 */
const User = require("../../src/models/user.model");
const validationErrorMessages = require("../../src/resources/validationErrorMessages");

describe("User model tests:", () => {
  describe("valid username", () => {
    it("should pass validation", () => {
      const user = new User({
        username: "myNewUserName",
      });

      const err = user.validateSync();

      expect(err).toBeUndefined();
    });
  });

  describe("invalid username", () => {
    const usernameInvalidCases = [
      [
        "should not pass validation -> username empty",
        new User({
          username: "",
        }),
      ],
      [
        "should not pass validation -> username too short",
        new User({
          username: "ab",
        }),
      ],
    ];

    usernameInvalidCases.forEach(([testName, input]) => {
      it(testName, () => {
        const user = input;
        const err = user.validateSync();
        expect(err).toBeDefined();
        expect(err.errors.username).toBeDefined();
        expect(err.errors.username.message).toBe(
          validationErrorMessages.USERNAME_MIN_LENGTH
        );
      });
    });

    it("should not pass validation -> username too long", () => {
      const user = new User({
        username: "ThisIsMyUsernameAsAnAppUser",
      });
      const err = user.validateSync();
      expect(err).toBeDefined();
      expect(err.errors.username).toBeDefined();
      expect(err.errors.username.message).toBe(
        validationErrorMessages.USERNAME_MAX_LENGTH
      );
    });
  });

  describe("valid email", () => {
    it("should pass validation", () => {
      const user = new User({
        email: "sokey72413@lofiey.com",
      });

      const err = user.validateSync();
      expect(err).toBeUndefined();
    });
  });

  describe("invalid email", () => {
    const emailInvalidCases = [
      ["should not match regex -> no prefix", new User({ email: "@mail.com" })],
      ["should not match regex -> no @", new User({ email: "randommailcom" })],
      [
        "should not match regex -> no domain name",
        new User({ email: "random@.com" }),
      ],
      ["should not match regex -> no .", new User({ email: "random@mailcom" })],
      [
        "should not match regex -> not top level domain",
        new User({ email: "random@mail." }),
      ],
    ];

    emailInvalidCases.forEach(([testName, input]) => {
      it(testName, () => {
        const user = input;
        const err = user.validateSync();
        expect(err).toBeDefined();
        expect(err.errors.email).toBeDefined();
        expect(err.errors.email.message).toBe(
          validationErrorMessages.EMAIL_INVALID
        );
      });
    });
  });
});
